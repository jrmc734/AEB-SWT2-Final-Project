/**
 * @page traceability Traceability
 *
 * This page describes the existing unit tests, their unique identifiers, and the requirements they validate.
 *
 * | Test ID  | Test Name           | Validated Requirements         | Tested Function         | Expected Outcome        |
 * |-----------|--------------------------|-------------------------------|-------------------------|-----------------------------|
 * | \anchor TC_AEB_A__001 **TC_AEB_A__001** | [test_actuatorsTranslateCanMsg_AEB_S_Identifier()](@ref test_actuatorsTranslateCanMsg_AEB_S_Identifier) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | belt_tightness = true, door_lock = false, should_activate_abs = true, alarm_led = true, alarm_buzzer = true |
 * | \anchor TC_AEB_A__002 **TC_AEB_A__002** | [test_actuatorsTranslateCanMsg_Empty_Identifier()](@ref test_actuatorsTranslateCanMsg_Empty_Identifier) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | All actuators state fields remain false |
 * | \anchor TC_AEB_A__003 **TC_AEB_A__003** | [test_updateInternalActuatorsState_Correct_State()](@ref test_updateInternalActuatorsState_Correct_State) | [SwR-4](@ref SwR-4) | [updateInternalActuatorsState()](@ref updateInternalActuatorsState) | belt_tightness = true, door_lock = false, should_activate_abs = true, alarm_led = true, alarm_buzzer = true |
 * | \anchor TC_AEB_A__004 **TC_AEB_A__004** | [test_actuatorsTranslateCanMsg()](@ref test_actuatorsTranslateCanMsg) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | Same expected output as TC_AEB_A__001	 |
 * | \anchor TC_AEB_A__005 **TC_AEB_A__005** | [test_actuatorsTranslateCanMsg_Unknown_Identifier()](@ref test_actuatorsTranslateCanMsg_Unknown_Identifier) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | All actuators state fields remain false		 |
 * | \anchor TC_AEB_A__006 **TC_AEB_A__006** | [test_updateInternalActuatorsState_DataFrame0_Active()](@ref test_updateInternalActuatorsState_DataFrame0_Active) | [SwR-4](@ref SwR-4) | [updateInternalActuatorsState()](@ref updateInternalActuatorsState) | belt_tightness = false, door_lock = true, should_activate_abs = false, alarm_led = true, alarm_buzzer = true		 |
 * | \anchor TC_AEB_A__007 **TC_AEB_A__007** | [test_InitialActuatorsState()](@ref test_InitialActuatorsState) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | All actuators state fields remain false		 |
 * | \anchor TC_AEB_A__008 **TC_AEB_A__008** | [test_actuatorsTranslateCanMsg_Unexpected_DataFrame()](@ref test_actuatorsTranslateCanMsg_Unexpected_DataFrame) | [SwR-4](@ref SwR-4) | [actuatorsTranslateCanMsg()](@ref actuatorsTranslateCanMsg) | belt_tightness = false, door_lock = true, should_activate_abs = false, alarm_led = false, alarm_buzzer = false		 |
 * | \anchor TC_AEB_A__009 **TC_AEB_A__009** | [test_actuatorsResponseLoop_EmptyQueue()](@ref test_actuatorsResponseLoop_EmptyQueue) | [SwR-4](@ref SwR-4) | [actuatorsResponseLoop()](@ref actuatorsResponseLoop) | After max iterations with empty queue, it should stop or behave as expected		 |
 * | \anchor TC_AEB_A__010 **TC_AEB_A__010** | [test_actuatorsResponseLoop_UnknownMessages()](@ref test_actuatorsResponseLoop_UnknownMessages) | [SwR-4](@ref SwR-4) | [actuatorsResponseLoop()](@ref actuatorsResponseLoop) | The state must be updated or not depending on internal logic. In this case: belt_tightness = true, door_lock = false, should_activate_abs = true, etc.		 |
 * | \anchor TC_LOG_UTILS_001 **TC_LOG_UTILS_001** | [test_log_event_fopen_fail()](@ref test_log_event_fopen_fail) | [SwR-4](@ref SwR-4) | [log_event()](@ref log_event) | Verifies if the fopen fail is catchable by the test, as a means to increase coverage.		 |
 * | \anchor TC_LOG_UTILS_002 **TC_LOG_UTILS_002** | [test_log_event_check_writing_no1()](@ref test_log_event_check_writing_no1) | [SwR-4](@ref SwR-4) | [log_event()](@ref log_event) | Writes a line in the log file and checks that the writing is in accordance with the data type.		 |
 */
